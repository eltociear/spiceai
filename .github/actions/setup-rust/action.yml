name: Sets up the Rust toolchain
description: 'composite action'
inputs:
  os:
    description: 'Operating system to set up the toolchain for'
    default: 'linux' # 'linux', 'darwin', 'windows'

runs:
  using: "composite"
  steps:
    - name: Install Rust if not installed (Linux/macOS)
      if: inputs.os != 'windows'
      shell: bash
      run: |
        echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH
        if [ -d $HOME/.cargo ]; then
          source $HOME/.cargo/env || true
        fi
        if ! command -v rustup &> /dev/null ; then
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --default-toolchain none -y
          source $HOME/.cargo/env || true
        fi

    - name: Install Rust if not installed (Windows)
      if : inputs.os == 'windows'
      shell: pwsh
      run: |
        if( (-not (get-command rustup))) {
          # TODO: Install Rust on Windows
          throw "Rustup not found"
        }

    - name: Install latest Rust stable toolchain (Linux/macOS)
      if: inputs.os != 'windows'
      shell: bash
      run: |
        rustup toolchain install stable

    - name: Install latest Rust stable toolchain (Windows)
      if: inputs.os == 'windows'
      shell: pwsh
      run: |
        rustup toolchain install stable
    
    - name: Install lld (Linux)
      if: inputs.os == 'linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y lld
    
    - name: Install lld (macOS)
      if: inputs.os == 'darwin'
      shell: bash
      run: |
        brew install lld
    
    - name: Install sccache (Linux X64)
      if: inputs.os == 'linux' && runner.arch == 'X64'
      shell: bash
      run: |
        wget https://github.com/mozilla/sccache/releases/download/v0.8.1/sccache-v0.8.1-i686-unknown-linux-musl.tar.gz
        tar -xvf sccache-v0.8.1-i686-unknown-linux-musl.tar.gz
        sudo mv sccache-v0.8.1-i686-unknown-linux-musl/sccache /usr/bin/sccache
    
    - name: Install sccache (Linux ARM)
      if: inputs.os == 'linux' && runner.arch == 'X64'
      shell: bash
      run: |
        wget https://github.com/mozilla/sccache/releases/download/v0.8.1/sccache-v0.8.1-aarch64-unknown-linux-musl.tar.gz
        tar -xvf sccache-v0.8.1-aarch64-unknown-linux-musl.tar.gz
        sudo mv sccache-v0.8.1-aarch64-unknown-linux-musl/sccache /usr/bin/sccache

    - name: Install sccache (macOS)
      if: inputs.os == 'darwin'
      shell: bash
      run: |
        brew install sccache
    
    - name: Configure sccache
      if: inputs.os == 'linux' || inputs.os == 'darwin'
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: todo
        AWS_SECRET_ACCESS_KEY: todo
      run: |
        rm -rf $HOME/.config/sccache/config
    
    - name: Configure Cargo
      if: inputs.os == 'linux' || inputs.os == 'darwin'
      shell: bash
      run: |
        mkdir -p $HOME/.cargo
        cp .config/cargo/config.toml $HOME/.cargo/config.toml